[tool.ruff]
target-version = "py310"
line-length = 110

[tool.ruff.lint]
select = []
ignore = ["ANN401", "C90", "D100", "D104", "D105", "D107", "D200", "D202", "D207", "D208", "D212", "E501", "EM101", "EM102", "ERA001", "FA", "FBT001", "FBT002", "FIX", "FIX002", "I001", "PERF203", "PLR09", "PLR2004", "Q000", "S101", "S113", "SIM105", "T201", "TD", "TD002", "W293"]
extend-select = ["UP", "I", "S", "B", "ALL"]

[tool.ruff.lint.pydocstyle]
convention = "numpy"

[tool.ruff.lint.extend-per-file-ignores]
"tests/**" = ["ANN", "ARG", "ASYNC", "BLE001", "D", "DTZ", "E722", "FBT003", "INP001", "N", "PLC", "PLR2004", "PLW0603", "PLW1641", "RET", "RUF012", "RUF100", "S108", "S113", "S603", "S607", "SLF", "TRY003", "TRY301"]
"**/tests/**" = ["ANN", "ARG", "ASYNC", "BLE001", "D", "DTZ", "E722", "FBT003", "INP001", "N", "PLC", "PLR2004", "PLW0603", "PLW1641", "RET", "RUF012", "RUF100", "S108", "S113", "S603", "S607", "SLF", "TRY003", "TRY301"]
"**/test_*.py" = ["ANN", "ARG", "ASYNC", "BLE001", "D", "DTZ", "E722", "FBT003", "INP001", "N", "PLC", "PLR2004", "PLW0603", "PLW1641", "RET", "RUF012", "RUF100", "S108", "S113", "S603", "S607", "SLF", "TRY003", "TRY301"]
"**/*_test.py" = ["ANN", "ARG", "ASYNC", "BLE001", "D", "DTZ", "E722", "FBT003", "INP001", "N", "PLC", "PLR2004", "PLW0603", "PLW1641", "RET", "RUF012", "RUF100", "S108", "S113", "S603", "S607", "SLF", "TRY003", "TRY301"]

[tool.poetry]
version = "0.0.0"

[tool.poetry.plugins."plaster.loader_factory"]
c2c = "c2cwsgiutils.loader:Loader"
"c2c+ini" = "c2cwsgiutils.loader:Loader"
"c2c+egg" = "c2cwsgiutils.loader:Loader"

[tool.poetry.plugins."plaster.wsgi_loader_factory"]
c2c = "c2cwsgiutils.loader:Loader"
"c2c+ini" = "c2cwsgiutils.loader:Loader"
"c2c+egg" = "c2cwsgiutils.loader:Loader"

[tool.poetry.plugins."paste.filter_factory"]
client_info = "c2cwsgiutils.client_info:filter_factory"
sentry = "c2cwsgiutils.sentry:filter_factory"

[tool.poetry.dependencies]
python = ">=3.10,<4.0"
requests = { version = "2.32.4" }
pyyaml = { version = "6.0.2" }
alembic = { version = "1.16.4", optional = true }
boltons = { version = "25.0.0", optional = true }
cornice = { version = "6.1.0", optional = true }
redis = { version = "6.2.0", optional = true }
gunicorn = { version = "23.0.0", optional = true }
lxml = { version = "6.0.0", optional = true }
objgraph = { version = "3.6.2", optional = true }
psycopg2 = { version = "2.9.10", optional = true }
pyramid = { version = "2.0.2", optional = true }
pyramid-tm = { version = "2.6", optional = true }
sentry-sdk = { version = "2.34.1", optional = true }
ujson = { version = "5.10.0" }
cee_syslog_handler = { version = "0.6.0" }
SQLAlchemy = { version = "2.0.42", optional = true }
SQLAlchemy-Utils = { version = "0.41.2", optional = true }
"zope.interface" = { version = "7.2", optional = true }
"zope.sqlalchemy" = { version = "3.1", optional = true }
pyjwt = { version = "2.10.1", optional = true }
requests-oauthlib = { version = "2.0.0", optional = true }
waitress = { version = "3.0.2", optional = true }
scikit-image = { version = "0.25.2", optional = true }
prometheus-client = { version = "0.22.1", optional = true}
pyramid_mako = { version = "1.1.0", optional = true}
psutil = { version = "7.0.0", optional = true}
Paste = { version = "3.10.1", optional = true}
coverage = { version = "7.10.1", optional = true}

[tool.poetry.extras]
standard = [
  # alembic
  "alembic",
  # oauth2
  "pyjwt",
  "requests-oauthlib",
  # sentry
  "sentry-sdk",
  # broadcast
  "redis",
  # webserver
  "cornice",
  "gunicorn",
  "psycopg2",
  "pyramid",
  "pyramid-tm",
  "SQLAlchemy",
  "SQLAlchemy-Utils",
  "zope.interface",
  "zope.sqlalchemy",
  "prometheus_client",
  "pyramid_mako",
  # waitress
  "waitress",
  "Paste",
]
alembic = ["alembic"]
debug = ["objgraph", "psutil", "coverage"]
oauth2 = ["pyjwt", "requests-oauthlib"]
sentry = ["sentry-sdk"]
dev = ["waitress"]
broadcast = ["redis"]
webserver = [
  "cornice",
  "gunicorn",
  "psycopg2",
  "pyramid",
  "pyramid-tm",
  "SQLAlchemy",
  "SQLAlchemy-Utils",
  "zope.interface",
  "zope.sqlalchemy",
  "prometheus_client",
  "pyramid_mako"]
waitress = [
  "waitress",
  "Paste",
  "cornice",
  "psycopg2",
  "pyramid",
  "pyramid-tm",
  "SQLAlchemy",
  "SQLAlchemy-Utils",
  "zope.interface",
  "zope.sqlalchemy",
  "prometheus_client",
  "pyramid_mako"]
tests = ["lxml", "boltons"]
all = [
  # alembic
  "alembic",
  # debug
  "objgraph",
  "psutil",
  "coverage",
  # oauth2
  "pyjwt",
  "requests-oauthlib",
  # sentry
  "sentry-sdk",
  # broadcast
  "redis",
  # webserver
  "cornice",
  "gunicorn",
  "psycopg2",
  "pyramid",
  "pyramid-tm",
  "SQLAlchemy",
  "SQLAlchemy-Utils",
  "zope.interface",
  "zope.sqlalchemy",
  "prometheus_client",
  "pyramid_mako",
  # tests
  "lxml",
  "boltons",
  # waitress
  "waitress",
  "Paste",
]
test_images = ["scikit-image"]

[tool.poetry.group.dev.dependencies]
# pylint = { version = "2.15.6" }
prospector = { version = "1.17.3", extras = ["with_bandit", "with_mypy", "with_pyroma", "with_ruff"] }
prospector-profile-duplicated = "1.10.5"
prospector-profile-utils = "1.26.5"
junit2html = "31.0.2"
pytest = "8.4.1"
pytest-cov = "6.2.1"
pytest-html = "4.1.1"
types-pyyaml = "6.0.12.20250516"
types-requests = "2.32.4.20250611"
types-redis = "4.6.0.20241004"
types-ujson = "5.10.0.20250326"
types-python-dateutil = "2.9.0.20250708"
typing_extensions = "4.14.1"

[tool.poetry-dynamic-versioning]
enable = true
vcs = "git"
pattern = "^(?P<base>\\d+(\\.\\d+)*)"
format-jinja = """
{%- if env.get("VERSION_TYPE") == "default_branch" -%}
{{serialize_pep440(bump_version(base, 1), dev=distance)}}
{%- elif env.get("VERSION_TYPE") == "stabilization_branch" -%}
{{serialize_pep440(bump_version(base, 2), dev=distance)}}
{%- elif distance == 0 -%}
{{serialize_pep440(base)}}
{%- else -%}
{{serialize_pep440(bump_version(base), dev=distance)}}
{%- endif -%}
"""

[tool.poetry-plugin-tweak-dependencies-version]
default = "present"
SQLAlchemy = ">=1.4.0,<3.0.0"

[project]
classifiers = [
    'Development Status :: 5 - Production/Stable',
    'Environment :: Plugins',
    'Framework :: Pyramid',
    'Intended Audience :: Developers',
    'Intended Audience :: Information Technology',
    'License :: OSI Approved :: BSD License',
    'Operating System :: OS Independent',
    'Programming Language :: Python',
    'Programming Language :: Python :: 3',
    'Programming Language :: Python :: 3.10',
    'Programming Language :: Python :: 3.11',
    'Programming Language :: Python :: 3.12',
    'Programming Language :: Python :: 3.13',
    'Topic :: Internet :: WWW/HTTP :: WSGI :: Application',
    'Typing :: Typed',
]
dynamic = ["dependencies", "version"]
name = "c2cwsgiutils"
description = "Common utilities for Camptocamp WSGI applications"
readme = "README.md"
keywords = ["geo", "gis", "sqlalchemy", "orm", "wsgi"]
license = "BSD-2-Clause"
authors = [{name = "Camptocamp",email = "info@camptocamp.com"}]
packages = [{ include = "c2cwsgiutils" }]
include = [
"c2cwsgiutils/py.typed",
"c2cwsgiutils/acceptance/screenshot.js",
"c2cwsgiutils/acceptance/package.json",
"c2cwsgiutils/acceptance/package-lock.json",
]
requires-python = ">=3.10"
dependencies = ["requests", "pyyaml", "ujson", "cee_syslog_handler", "prometheus-client"]

[project.urls]
repository = "https://github.com/camptocamp/c2cwsgiutils"
"Bug Tracker" = "https://github.com/camptocamp/c2cwsgiutils/issues"

[project.scripts]
c2cwsgiutils-genversion = "c2cwsgiutils.scripts.genversion:main"
c2cwsgiutils-coverage-report = "c2cwsgiutils.scripts.coverage_report:main"
c2cwsgiutils-stats-db = "c2cwsgiutils.scripts.stats_db:main"
c2cwsgiutils-test-print = "c2cwsgiutils.scripts.test_print:main"
c2cwsgiutils-check-es = "c2cwsgiutils.scripts.check_es:main"

[project.optional-dependencies]
standard = ["alembic", "cornice", "redis", "gunicorn", "psycopg2", "pyramid", "pyramid-tm", "sentry-sdk", "SQLAlchemy<3.0.0,>=1.4.0", "SQLAlchemy-Utils", "zope.interface", "zope.sqlalchemy", "pyjwt", "requests-oauthlib", "waitress", "pyramid_mako", "Paste"]
alembic = ["alembic"]
all = ["alembic", "boltons", "cornice", "redis", "gunicorn", "lxml", "objgraph", "psycopg2", "pyramid", "pyramid-tm", "sentry-sdk", "SQLAlchemy<3.0.0,>=1.4.0", "SQLAlchemy-Utils", "zope.interface", "zope.sqlalchemy", "pyjwt", "requests-oauthlib", "waitress", "pyramid_mako", "psutil", "Paste", "coverage"]
tests = ["boltons", "lxml"]
webserver = ["cornice", "gunicorn", "psycopg2", "pyramid", "pyramid-tm", "SQLAlchemy<3.0.0,>=1.4.0", "SQLAlchemy-Utils", "zope.interface", "zope.sqlalchemy", "pyramid_mako"]
waitress = ["cornice", "psycopg2", "pyramid", "pyramid-tm", "SQLAlchemy<3.0.0,>=1.4.0", "SQLAlchemy-Utils", "zope.interface", "zope.sqlalchemy", "waitress", "pyramid_mako", "Paste"]
broadcast = ["redis"]
debug = ["objgraph", "psutil", "coverage"]
sentry = ["sentry-sdk"]
oauth2 = ["pyjwt", "requests-oauthlib"]
dev = ["waitress"]
test_images = ["scikit-image"]

[build-system]
requires = [
  "poetry-core>=1.0.0",
  "poetry-dynamic-versioning[plugin]",
  "poetry-dynamic-versioning"
]
build-backend = "poetry.core.masonry.api"
